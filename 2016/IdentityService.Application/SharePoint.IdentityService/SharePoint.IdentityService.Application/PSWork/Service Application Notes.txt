Installing and provisioning custom service application
---
Install-IdentityService 
$sampleApp = New-IdentityServiceApplication -Name "SharePoint Identity Service Application Federated" -ApplicationPool SecurityTokenServiceApplicationPool -Databaseserver frmtcsql2008r2 -DatabaseName IdentityService_DB_Federated -UseExistingDatabase 
$sampleApp = New-IdentityServiceApplication -Name "SharePoint Identity Service Application Windows" -ApplicationPool SecurityTokenServiceApplicationPool -Databaseserver frmtcsql2008r2 -DatabaseName IdentityService_DB_Windows -UseExistingDatabase 
Stop-Service "SPTimerV4"
IISRESET
Start-Service "SPTimerV4"

Stop-Service "SPTimerV4"
IISRESET
Start-Service "SPTimerV4"

Stop-Service "SPTimerV4"
Get-SPServiceApplicationProxy | where-object {$_.typename -match "Identity"} | ForEach {$_.Delete()}
Get-SPServiceApplication | where-object {$_.typename -match "Identity"} | ForEach {$_.Delete()}
Get-SPDatabase | where-object {$_.typename -match "Identity"} | ForEach {$_.Delete()}
Get-SPTimerJob | where-object {$_.typename -match "Identity"} | ForEach {$_.Delete()}
Get-SPServiceInstance | where-object {$_.typename -match "Identity"} | ForEach {$_.Delete()}
IISRESET
Start-Service "SPTimerV4"

Get-SPDatabase | where-object {$_.Id -match "72f31d88-39c1-4837-9d6b-93d590ef0ced"} | ForEach {$_.Delete()}
Get-SPDatabase | where-object {$_.Id -match "e49d25c0-04c8-4dc1-b596-e7786d1054f9"} | ForEach {$_.Delete()}

Get-SPServiceInstance | where-object {$_.typename -match "Identity"} 
Get-SPServiceApplication | where-object {$_.typename -match "Identity"} 
Get-SPServiceApplicationProxy | where-object {$_.typename -match "Identity"}
Get-SPDatabase | where-object {$_.typename -match "Identity"} 
Get-SPTimerJob | where-object {$_.typename -match "Identity"} 

Get-SPTimerJob | where-object {$_.Id -match "7dde7d3b-6e85-4231-82ca-a08a6669c48e"} 

$s = Get-SPServiceInstance | where-object {$_.typename -match "Identity"} 
$i = 0
Stop-SPServiceInstance $s[$i].Id
Start-SPServiceInstance $s[$i].Id

New-SPClaimProvider -DisplayName "AD" -Description "Windows Claims Provider" -Type "SharePoint.IdentityService.ClaimsProvider.IdentityServiceClaimsProvider" -AssemblyName "SharePoint.IdentityService.ClaimsProvider, Version=16.0.0.0, Culture=neutral, PublicKeyToken=ad9787278992c174" 
New-SPClaimProvider -DisplayName "redhook" -Description "Redhook Claims Provider" -Type "SharePoint.IdentityService.ClaimsProvider.IdentityServiceClaimsProvider" -AssemblyName "SharePoint.IdentityService.ClaimsProvider, Version=16.0.0.0, Culture=neutral, PublicKeyToken=ad9787278992c174" 

New-SPClaimProvider -DisplayName "TestClaims" -Description "TestClaims Provider" -Type "SharePoint.IdentityService.ClaimsProvider.IdentityServiceClaimsProvider" -AssemblyName "SharePoint.IdentityService.ClaimsProvider, Version=1.0.0.0, Culture=neutral, PublicKeyToken=ad9787278992c174" 
Remove-SPClaimProvider -identity TestClaims

New-SPClaimProvider -DisplayName "Colas" -Description "Colas SharePoint Claims Provider" -Type "SharePoint.IdentityService.ClaimsProvider.IdentityServiceClaimsProvider" -AssemblyName "SharePoint.IdentityService.ClaimsProvider, Version=1.0.0.0, Culture=neutral, PublicKeyToken=ad9787278992c174" 

$CM = Get-SPClaimProviderManager
$AD = Get-SPClaimProvider -Identity "AD"
$AD.IsEnabled = $false
$AD.IsVisible = $false
$AD.IsUsedByDefault = $false
$CM.Update()

/*
$user = $env:userdomain + '\' + $env:username
$userClaim = New-SPClaimsPrincipal -Identity $user -IdentityType WindowsSamAccountName
$security = Get-SPServiceApplicationSecurity $sampleApp
Grant-SPObjectSecurity $security $userClaim -Rights "Contrôle Total"
Set-SPServiceApplicationSecurity $sampleApp $security

$sampleAppProxy = New-IdentityServiceProxy -Name "SharePoint Identity Service Application Proxy 2" -ServiceApplication $sampleApp
Get-SPServiceApplicationProxyGroup -Default | Add-SPServiceApplicationProxyGroupMember -Member $sampleAppProxy
Get-SPServiceInstance | where-object {$_.typename -match "Identity Service"}
*/


$job = Get-SPTimerJob <guid>
$job.Delete()

Stop-Service "SPTimerV4"
IISRESET
Start-Service "SPTimerV4"

Get-SPDatabase | where {$_.exists -eq $false} | foreach {$_.delete()}

Get-SPDatabase | Where{$_.Exists -eq $false} | ForEach {$_.Delete()}
Get-SPDatabase | where-object {$_.typename -match "Identity Service"} 


Get-SPServiceApplication | where-object {$_.typename -match "Identity"} | ForEach Remove-SPServiceApplication

Get-SPDatabase | where-object {$_.typename -match "Identity"} | ForEach {$_.Unprovision()}
Get-SPDatabase | where-object {$_.typename -match "Identity"} | ForEach {$_.Delete()}




Get-SPServiceInstance | where-object {$_.typename -match "centrale"}

Get-SPServiceInstance | where-object {$_.typename -match "Timer"}

Get-SPTimerJob | where-object {$_.typename -match "SharePoint"}

Get-SPServiceInstance | where{$_.GetType()._typeName -match "SharePoint.Identity"} | Start-SPServiceInstance


Stsadm -o deleteconfigurationobject -id fa2ed82d-9b50-4443-8ba5-8d34102c4f9d

Stop-SPServiceInstance "8a81d1d9-99fb-424e-b0ba-f2813fb5a745"
Start-SPServiceInstance "8a81d1d9-99fb-424e-b0ba-f2813fb5a745"
Stop-SPServiceInstance "1a48d174-ed18-4917-9481-a177873b389b"



Set-IdentityServiceApplication "SharePoint Identity Service Application 2" -AssemblyDecription "SharePoint.IdentityService.Access.ActiveDirectoryWrapper,SharePoint.IdentityService.Access, Version=1.0.0.0, Culture=neutral, PublicKeyToken=ad9787278992c174" 
Get-IdentityServiceApplication "SharePoint Identity Service Application 2" -AssemblyDecription

$allcfg = Get-IdentityServiceApplication "SharePoint Identity Service Application 2" -AllConnectionConfiguration
$cfg = Get-IdentityServiceApplication "SharePoint Identity Service Application 2" -ConnectionConfiguration default
$cfg.timeout = 50
Set-IdentityServiceApplication "SharePoint Identity Service Application 2" -ConnectionConfiguration $cfg


$alldom = Get-IdentityServiceApplication "SharePoint Identity Service Application 2" -AllDomainConfiguration
$cfg = Get-IdentityServiceApplication "SharePoint Identity Service Application 2" -DomainConfiguration rsoft.com
$cfg.Connection = "default"
Set-IdentityServiceApplication "SharePoint Identity Service Application" -DomainConfiguration $cfg


$cfg = Get-IdentityServiceApplication "SharePoint Identity Service Application 2" -DomainConfiguration rsoft.com
Remove-IdentityServiceApplication "SharePoint Identity Service Application 2" -DomainConfiguration $cfg
$cfg.Connection = "default"
Set-IdentityServiceApplication "SharePoint Identity Service Application 2" -DomainConfiguration $cfg


$cfg = Get-IdentityServiceApplication "SharePoint Identity Service Application 2" -ConnectionConfiguration test
$cfg.Password = "yourpwd"
Set-IdentityServiceApplication "SharePoint Identity Service Application 2" -ConnectionConfiguration $cfg

Remove-IdentityServiceApplication "SharePoint Identity Service Application 2" -ConnectionConfiguration $cfg

$allprm = Get-IdentityServiceApplication "SharePoint Identity Service Application 2" -AllGlobalParameters

Reset-IdentityServiceApplication 
Reload-IdentityServiceApplication "SharePoint Identity Service Application 2"


[array]$servers = "frmtcinteras10","frmtcinterdv10","frmtcintersp10"
foreach ($server in $servers)
{
    Write-Host "Restarting IIS on server $server..."
    IISRESET $server /noforce
    Write-Host "IIS status for server $server"
    IISRESET $server /status
}
Write-Host IIS has been restarted on all servers
